DI - Dependecy Injection

의존성을 주입시킨다 라는 뜻

객체를 직접 생성하지 않고 외부에서 생성 후 주입을 시켜주는 방식

예) a 라는 객체에서 b,c라는 객체를 이용할 때 new b(), new c() 처럼 new 생성자를 통해서 직접 생성하는 방법과
									setter() 나 생성자를 통해 사용하는 방법이 있다.
									
여기서 new 생성자를 사용한 방법은 직접 클래스를 생성해서 사용
메인 클래스에서 b 클래스를 생성했다면 메인 클래스는 b 클래스에 의존하고 있다고 생각하면 됨
main class 안에 Button button = new Button(); 이런식으로 써져있을 경우

두번째 setter나 생성자를 통해서 사용하는 방법을 주입한다고 생각하면 됨 
= 스프링에서 사용하는 방식(DI)

스프링은 외부(IOC컨테이너)에서 생성된 수많은 객체를 조립(주입) 시켜 setter 혹은 생성자를 통해
메인 객체에 사용할 수 있게 함

applicationContext.xml에 적어서 사용 - config.xml에 적어도 되는 듯
basic - student 패키지 + config2.xml를 참고 

setter()를 사용했을 때와 생성자를 사용했을 때의 작성방법이 다름.

